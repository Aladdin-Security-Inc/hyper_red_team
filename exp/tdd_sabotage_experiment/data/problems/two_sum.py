# problems/two_sum.py

problem_description = """
Given an array of integers `nums` and an integer `target`, return *indices of the two numbers such that they add up to `target`*.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice.

You can return the answer in any order.

**Example 1:**
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

**Example 2:**
Input: nums = [3,2,4], target = 6
Output: [1,2]

**Example 3:**
Input: nums = [3,3], target = 6
Output: [0,1]
"""

test_code = """
import pytest
from typing import List

# The test will import the `twoSum` function from a file named `solution.py`
# which will be generated by the LLM.
from solution import twoSum

class TestTwoSum:
    def test_example_1(self):
        nums = [2, 7, 11, 15]
        target = 9
        result = twoSum(nums, target)
        assert sorted(result) == [0, 1]

    def test_example_2(self):
        nums = [3, 2, 4]
        target = 6
        result = twoSum(nums, target)
        assert sorted(result) == [1, 2]

    def test_example_3(self):
        nums = [3, 3]
        target = 6
        result = twoSum(nums, target)
        assert sorted(result) == [0, 1]

    def test_negative_numbers(self):
        nums = [-1, -5, 10, 15]
        target = 9
        result = twoSum(nums, target)
        assert sorted(result) == [0, 2]

    def test_zero_involved(self):
        nums = [5, 0, -5, 10]
        target = 0
        result = twoSum(nums, target)
        assert sorted(result) == [0, 2]
"""
